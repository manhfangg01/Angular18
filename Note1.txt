Angular là framework frontend ra đời đầu tiên (Được Google chống lưng)
- Sử dụng "typescript" là ngôn ngữ chính(Ngôn ngữ hướng đối tượng trong khi JS là ngôn ngữ hướng thủ tục) giúp phát triển web một cách có cấu trúc, dễ bảo trì và mở rộng
- Cung cấp khả năng two-way data biding giữa Model và View

* Two-way data biding: Two-way data binding trong Angular cho phép dữ liệu được đồng bộ hóa giữa component (logic) và template (giao diện). Khi dữ liệu thay đổi trong component, giao diện sẽ cập nhật ngay lập tức, và ngược lại.

- Route Angular: Dạng cây dữ liệu 

- Nhược điểm: 
  + Không có Virtual DOM như React -> Cập nhật DOM thực có phần chậm hơn  (Real DOM và Virtual DOM là 2 khái niệm khác nhau)
  + Độ phức tạo cao(Framework rất lớn, phát triển dài) --> Bắt buộc phải tìm hiểu chuyên sâu



+ Real DOM: xài HTML 100%
+ Virtual DOM: Sử dụng các view Engine



3 thành phần chính 
  1. app.component.html: HTML thuần (Khung)
  2. app.component.css: Viết style (Màu sắc hình ảnh)
  3. app.component.ts: Viết logic và quản lý components


4. Pipes
  Dùng để chuyển đổi giá trị bằng logic theo ý của lập trình viên

5. List-Render (ngFor)
  - Dùng để lặp danh sách hiển thị lên view(nó giống <c:forEach> của jsp)
6. Directive(3 loại)
  -  Component: Cốt lõi của mọi ứng dụng Angular
        + Template HTML: Được sử dụng để tạo thành các UI-compenent tách biệt với nhau
  - Structural: Được dùng để thay đổi cấu trúc DOM(Thêm, xóa DOM-component)
        + ngIf, ngFor, ngSwitch, ...
        + Dùng dấu "*"
  - Attribute: Thay đổi giao diện và hành vi của 1 phần tử nhưng không thay đổi cấu trúc của nó(Chỉ có thể sửa chứ không thể xóa khỏi cây DOM, cùng lắm là ẩn đi)
        + ngClass, ngStyle, hidden, disable 
        + Dùng dấu "[]"

7. app.routes.ts: Nơi chứa các đường dẫn. vd: path:'' -> home('\')
    - app.component.html là nơi chứa Component cha
      + <router-outlet /> -> hiển thị Component con

8. Props
  - Truyền dữ luện một chiều: từ component cha đến component con
  - Không thay đổi được dữ liệu: component con không thể sửa các dữ liệu truyền xuống bằng Props
  - Hỗ trợ mọi loại dữ liệu: string, number, object, array, function


9. Lifecycle Hocks (vòng đời của 1 component)
- Creation
  $1: Constructor: là hàm đầu tiên chạy -> Dùng để khởi tạo dữ liệu default cho các biến hoặc giá trị từ những nơi khác vào
- Change Detection
  $2: ngOnIt: Hàm này sẽ được gọi 1 lần ngay khi tất cả được khởi tạo xong
  $3:  ngDoCheck: chạy lại bất cứ khi nào có điều gì thay đổi - Chỉ sử dụng trong những TH đặc biệt - Lưu ý: hủy đi ngay khi không cần
  $4: ngOnchanges: sẽ được cập nhật và chạy lại nếu props có sự thay đổi(recommended)(Chỉ sử dụng trong component con)
    + Hàm này sẽ được tạo cùng với 1 đối số là changes(có tác dụng ghi nhận các sự thay đổi)
          VD: changes['<variableName>']  .previousValue: giá trị trước đó
                                         .currentValue: giá trị hiện tại
                                         .isFirstChange: thường là lần khởi tạo đầu tiên
      * Lưu ý: thay đổi chỉ được ghi nhận khi biến đó được khởi tạo lại, nếu chỉ thay đổi giá trị thì không tính là thay đổi

- Destruction(Thường chỉ xuất hiện trong các dự án lớn yêu cầu tính tối ưu cao)
  $5 ngOnDestroy(Là đại diện cho giai đoạn này): Hàm này được kích hoạt trước khi 1 component bị xóa khỏi cây DOM
        + Realtime: Các ứng dụng nhắn tin trực tuyến
        + API: Gọi API, Khi không sử dụng nữa thì hủy bỏ API đó
        + Logic(timeOut, interval): Xóa đi các hành động khi thời gian chờ không đủ đáp ứng. VD: Khi đặt thời gian 5 sẽ xảy ra 1 hành động, nhưng 3 giây đã rời khỏi trang web -> hủy đi cái hẹn cũ(5 giây)



// Tác vụ API
1. HttpClient là một service trong Angular, dùng để gửi hoặc nhận yêu cầu HTTP(GET, POST, PUT, DELETE, ...) Đến API hoặc máy chủ

// Observable: Theo dõi các luồng dữ liệu bất đồng độ
  - Một biến có kiểu dữ liệu là Observable<> là biến có thể được theo dõi luồng dữ liệu
  -> từ đó có thể dùng một biến có kiểu Subscription theo dõi việc đăng kí (subscribe), có thể dùng biến:Subscription để unsubscribed Khi biến đó bị hủy





// Http Mapping
  Khi get API thì có thể gọi hàm pipe(), trong hàm này bạn có thể gọi các hàm như map(), reduce(), filter(), ....

- Các nguồn chính của dữ liệu bất đồng bộ
1. API
2. Behavior (Các hành động của người Dùng)
3.Timer(timeout, interval)



- Validate Form chỉ áp dụng formGroup (Không áp dụng với formControl )